import 'package:equatable/equatable.dart';
import 'package:furever_home/features/adoption/domain/entity/adoption_entity.dart';
import 'package:json_annotation/json_annotation.dart';

part 'adoption_api_model.g.dart'; // This file will be generated by build_runner

@JsonSerializable()
class AdoptionApiModel extends Equatable {
  final String applicantId;
  final String petId;
  final String applicantName;
  final String applicantEmail;
  final String applicantPhone;
  final String districtOrCity;
  final String homeAddress;
  final int householdMembers;
  final bool hasPets;
  final String petDetails;
  final String residenceType;
  final String reasonForAdoption;
  final String experienceWithPets;
  final bool agreementToTerms;

  AdoptionApiModel({
    required this.applicantId,
    required this.petId,
    required this.applicantName,
    required this.applicantEmail,
    required this.applicantPhone,
    required this.districtOrCity,
    required this.homeAddress,
    required this.householdMembers,
    required this.hasPets,
    required this.petDetails,
    required this.residenceType,
    required this.reasonForAdoption,
    required this.experienceWithPets,
    required this.agreementToTerms,
  });

  @override
  List<Object?> get props => [
        applicantId,
        petId,
        applicantName,
        applicantEmail,
        applicantPhone,
        districtOrCity,
        homeAddress,
        householdMembers,
        hasPets,
        petDetails,
        residenceType,
        reasonForAdoption,
        experienceWithPets,
        agreementToTerms,
      ];

  // Factory method to create an instance from JSON
  factory AdoptionApiModel.fromJson(Map<String, dynamic> json) =>
      _$AdoptionApiModelFromJson(json);

  // Method to convert the object back to JSON
  Map<String, dynamic> toJson() => _$AdoptionApiModelToJson(this);

  // A method to map from AdoptionEntity to AdoptionEntity (remote)
  static AdoptionApiModel fromEntity(AdoptionEntity entity) {
    return AdoptionApiModel(
      applicantId: entity.applicantId,
      petId: entity.petId,
      applicantName: entity.applicantName,
      applicantEmail: entity.applicantEmail,
      applicantPhone: entity.applicantPhone,
      districtOrCity: entity.districtOrCity,
      homeAddress: entity.homeAddress,
      householdMembers: entity.householdMembers,
      hasPets: entity.hasPets,
      petDetails: entity.petDetails,
      residenceType: entity.residenceType,
      reasonForAdoption: entity.reasonForAdoption,
      experienceWithPets: entity.experienceWithPets,
      agreementToTerms: entity.agreementToTerms,
    );
  }
}
